#!/usr/bin/env node

import { execSync } from "child_process"
import { existsSync, writeFileSync } from "fs"
import { join } from "path"

interface InstallationResult {
  success: boolean
  message: string
  details?: string[]
  errors?: string[]
}

class TensorFlowCLIInstaller {
  private logMessages: string[] = []
  private errorMessages: string[] = []

  private log(message: string) {
    console.log(message)
    this.logMessages.push(message)
  }

  private error(message: string) {
    console.error(message)
    this.errorMessages.push(message)
  }

  async checkPython(): Promise<boolean> {
    try {
      this.log("üêç V√©rification de Python...")
      const pythonVersion = execSync("python --version", { encoding: "utf8" }).trim()
      this.log(`‚úÖ ${pythonVersion} trouv√©`)
      return true
    } catch (error) {
      try {
        const python3Version = execSync("python3 --version", { encoding: "utf8" }).trim()
        this.log(`‚úÖ ${python3Version} trouv√©`)
        return true
      } catch (error3) {
        this.error("‚ùå Python non trouv√©. Veuillez installer Python 3.8+")
        return false
      }
    }
  }

  async checkPip(): Promise<boolean> {
    try {
      this.log("üì¶ V√©rification de pip...")
      const pipVersion = execSync("pip --version", { encoding: "utf8" }).trim()
      this.log(`‚úÖ ${pipVersion}`)
      return true
    } catch (error) {
      try {
        const pip3Version = execSync("pip3 --version", { encoding: "utf8" }).trim()
        this.log(`‚úÖ ${pip3Version}`)
        return true
      } catch (error3) {
        this.error("‚ùå pip non trouv√©. Veuillez installer pip")
        return false
      }
    }
  }

  async createVirtualEnvironment(): Promise<boolean> {
    try {
      const venvPath = join(process.cwd(), "python-backend", "venv")

      if (existsSync(venvPath)) {
        this.log("üìÅ Environnement virtuel existant trouv√©")
        return true
      }

      this.log("üèóÔ∏è Cr√©ation de l'environnement virtuel...")

      // Cr√©ation du dossier python-backend s'il n'existe pas
      const backendPath = join(process.cwd(), "python-backend")
      if (!existsSync(backendPath)) {
        execSync(`mkdir -p "${backendPath}"`)
      }

      // Cr√©ation de l'environnement virtuel
      execSync("python -m venv python-backend/venv", { stdio: "inherit" })
      this.log("‚úÖ Environnement virtuel cr√©√©")
      return true
    } catch (error) {
      try {
        execSync("python3 -m venv python-backend/venv", { stdio: "inherit" })
        this.log("‚úÖ Environnement virtuel cr√©√© avec python3")
        return true
      } catch (error3) {
        this.error(`‚ùå Erreur cr√©ation environnement virtuel: ${error}`)
        return false
      }
    }
  }

  async installTensorFlow(): Promise<boolean> {
    try {
      this.log("ü§ñ Installation de TensorFlow...")

      const isWindows = process.platform === "win32"
      const activateCmd = isWindows
        ? "python-backend\\venv\\Scripts\\activate.bat"
        : "source python-backend/venv/bin/activate"

      const installCmd = isWindows
        ? `${activateCmd} && pip install tensorflow==2.13.0`
        : `bash -c "${activateCmd} && pip install tensorflow==2.13.0"`

      execSync(installCmd, { stdio: "inherit" })
      this.log("‚úÖ TensorFlow install√©")
      return true
    } catch (error) {
      this.error(`‚ùå Erreur installation TensorFlow: ${error}`)
      return false
    }
  }

  async installOpenCV(): Promise<boolean> {
    try {
      this.log("üîß Installation d'OpenCV...")

      const isWindows = process.platform === "win32"
      const activateCmd = isWindows
        ? "python-backend\\venv\\Scripts\\activate.bat"
        : "source python-backend/venv/bin/activate"

      const installCmd = isWindows
        ? `${activateCmd} && pip install opencv-python==4.8.1.78`
        : `bash -c "${activateCmd} && pip install opencv-python==4.8.1.78"`

      execSync(installCmd, { stdio: "inherit" })
      this.log("‚úÖ OpenCV install√©")
      return true
    } catch (error) {
      this.error(`‚ùå Erreur installation OpenCV: ${error}`)
      return false
    }
  }

  async installAllDependencies(): Promise<boolean> {
    try {
      this.log("üìö Installation de toutes les d√©pendances...")

      const isWindows = process.platform === "win32"
      const activateCmd = isWindows
        ? "python-backend\\venv\\Scripts\\activate.bat"
        : "source python-backend/venv/bin/activate"

      const installCmd = isWindows
        ? `${activateCmd} && pip install -r python-backend/requirements.txt`
        : `bash -c "${activateCmd} && pip install -r python-backend/requirements.txt"`

      execSync(installCmd, { stdio: "inherit" })
      this.log("‚úÖ Toutes les d√©pendances install√©es")
      return true
    } catch (error) {
      this.error(`‚ùå Erreur installation d√©pendances: ${error}`)
      return false
    }
  }

  async testInstallation(): Promise<boolean> {
    try {
      this.log("üß™ Test de l'installation...")

      const isWindows = process.platform === "win32"
      const activateCmd = isWindows
        ? "python-backend\\venv\\Scripts\\activate.bat"
        : "source python-backend/venv/bin/activate"

      const testCmd = isWindows
        ? `${activateCmd} && python -c "import tensorflow as tf; import cv2; print(f'TensorFlow: {tf.__version__}'); print(f'OpenCV: {cv2.__version__}')"`
        : `bash -c "${activateCmd} && python -c \"import tensorflow as tf; import cv2; print(f'TensorFlow: {tf.__version__}'); print(f'OpenCV: {cv2.__version__}')\""`

      const output = execSync(testCmd, { encoding: "utf8" })
      this.log("‚úÖ Test r√©ussi:")
      this.log(output)
      return true
    } catch (error) {
      this.error(`‚ùå Test √©chou√©: ${error}`)
      return false
    }
  }

  async installTensorFlowCLI(): Promise<boolean> {
    try {
      this.log("‚öôÔ∏è Installation du TensorFlow CLI...")

      const isWindows = process.platform === "win32"
      const activateCmd = isWindows
        ? "python-backend\\venv\\Scripts\\activate.bat"
        : "source python-backend/venv/bin/activate"

      // Installation des outils TensorFlow
      const cliPackages = ["tensorboard", "tensorflow-datasets", "tensorflow-hub", "tensorflow-model-optimization"]

      for (const pkg of cliPackages) {
        this.log(`üì¶ Installation de ${pkg}...`)
        const installCmd = isWindows
          ? `${activateCmd} && pip install ${pkg}`
          : `bash -c "${activateCmd} && pip install ${pkg}"`

        execSync(installCmd, { stdio: "inherit" })
      }

      this.log("‚úÖ TensorFlow CLI install√©")
      return true
    } catch (error) {
      this.error(`‚ùå Erreur installation TensorFlow CLI: ${error}`)
      return false
    }
  }

  async createTensorFlowScripts(): Promise<void> {
    this.log("üìù Cr√©ation des scripts TensorFlow...")

    // Script de test TensorFlow
    const testScript = `#!/usr/bin/env python3
"""
Test script for TensorFlow installation
"""
import tensorflow as tf
import cv2
import numpy as np
import sys

def test_tensorflow():
    print("ü§ñ Test TensorFlow...")
    print(f"Version: {tf.__version__}")
    print(f"GPU disponible: {tf.config.list_physical_devices('GPU')}")
    
    # Test simple
    x = tf.constant([[1.0, 2.0], [3.0, 4.0]])
    y = tf.constant([[1.0, 1.0], [0.0, 1.0]])
    z = tf.matmul(x, y)
    print(f"Test calcul: {z.numpy()}")
    print("‚úÖ TensorFlow OK")

def test_opencv():
    print("üîß Test OpenCV...")
    print(f"Version: {cv2.__version__}")
    
    # Test simple
    img = np.zeros((100, 100, 3), dtype=np.uint8)
    cv2.rectangle(img, (10, 10), (90, 90), (255, 255, 255), 2)
    print("‚úÖ OpenCV OK")

if __name__ == "__main__":
    try:
        test_tensorflow()
        test_opencv()
        print("üéâ Tous les tests r√©ussis!")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)
`

    writeFileSync(join(process.cwd(), "python-backend", "test_installation.py"), testScript)

    // Script de d√©marrage TensorBoard
    const tensorboardScript = `#!/usr/bin/env python3
"""
TensorBoard launcher for BreezeFrame
"""
import subprocess
import sys
import os

def start_tensorboard(logdir="./logs", port=6006):
    print(f"üöÄ D√©marrage TensorBoard sur le port {port}")
    print(f"üìÅ Dossier logs: {logdir}")
    
    if not os.path.exists(logdir):
        os.makedirs(logdir)
        print(f"üìÅ Dossier {logdir} cr√©√©")
    
    try:
        subprocess.run([
            sys.executable, "-m", "tensorboard.main",
            "--logdir", logdir,
            "--port", str(port),
            "--host", "0.0.0.0"
        ])
    except KeyboardInterrupt:
        print("\\nüõë TensorBoard arr√™t√©")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="D√©marrer TensorBoard")
    parser.add_argument("--logdir", default="./logs", help="Dossier des logs")
    parser.add_argument("--port", type=int, default=6006, help="Port TensorBoard")
    
    args = parser.parse_args()
    start_tensorboard(args.logdir, args.port)
`

    writeFileSync(join(process.cwd(), "python-backend", "start_tensorboard.py"), tensorboardScript)

    this.log("‚úÖ Scripts TensorFlow cr√©√©s")
  }

  async run(): Promise<InstallationResult> {
    this.log("üöÄ Installation du TensorFlow CLI pour BreezeFrame")
    this.log("=".repeat(50))

    // V√©rifications pr√©alables
    if (!(await this.checkPython())) {
      return {
        success: false,
        message: "Python non trouv√©",
        errors: this.errorMessages,
      }
    }

    if (!(await this.checkPip())) {
      return {
        success: false,
        message: "pip non trouv√©",
        errors: this.errorMessages,
      }
    }

    // Installation
    const steps = [
      { name: "Environnement virtuel", fn: () => this.createVirtualEnvironment() },
      { name: "TensorFlow", fn: () => this.installTensorFlow() },
      { name: "OpenCV", fn: () => this.installOpenCV() },
      { name: "D√©pendances compl√®tes", fn: () => this.installAllDependencies() },
      { name: "TensorFlow CLI", fn: () => this.installTensorFlowCLI() },
      { name: "Test installation", fn: () => this.testInstallation() },
    ]

    for (const step of steps) {
      this.log(`\nüìã ${step.name}...`)
      if (!(await step.fn())) {
        return {
          success: false,
          message: `√âchec: ${step.name}`,
          details: this.logMessages,
          errors: this.errorMessages,
        }
      }
    }

    // Cr√©ation des scripts utilitaires
    await this.createTensorFlowScripts()

    this.log("\nüéâ Installation TensorFlow CLI termin√©e!")
    this.log("\nüìã Commandes disponibles:")
    this.log("  npm run python-backend     # D√©marrer le serveur")
    this.log("  npm run test-tensorflow    # Tester l'installation")
    this.log("  npm run tensorboard        # D√©marrer TensorBoard")

    return {
      success: true,
      message: "TensorFlow CLI install√© avec succ√®s",
      details: this.logMessages,
    }
  }
}

// Fonction principale
async function installTensorFlowCLI(): Promise<InstallationResult> {
  const installer = new TensorFlowCLIInstaller()
  return await installer.run()
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  installTensorFlowCLI()
    .then((result) => {
      if (result.success) {
        console.log(`\n‚úÖ ${result.message}`)
        process.exit(0)
      } else {
        console.error(`\n‚ùå ${result.message}`)
        if (result.errors) {
          result.errors.forEach((error) => console.error(`   ${error}`))
        }
        process.exit(1)
      }
    })
    .catch((error) => {
      console.error(`\nüí• Erreur inattendue: ${error}`)
      process.exit(1)
    })
}

export { installTensorFlowCLI, TensorFlowCLIInstaller }
